
> Hoisting :
  • JavaScript enables you to have multiple var statements anywhere in a function, and they all act as if the variables were declared at the top of the function. 
 myname = "global"; // global variable 
 function func() {
   alert(myname); // "undefined"
   var myname; // same as -> var myname = undefined;
   alert(myname); // "undefined"
   myname = "local";
   alert(myname); // "local" 
 }
 func();
 
>Single "var" pattern

 Using a single var statement at the top of your functions is a useful pattern to adopt. It has the following benefits:
  • Provides a single place to look for all the local variables needed by the function
  • Prevents logical errors when a variable is used before it’s defined
  • Helps you remember to declare variables and therefore minimize globals
  • Is less code (to type and to transfer over the wire)   
 function func() { 
   var a = 1,
       b = 2, 
       sum = a + b, 
       myobject = {}, 
       i, 
       j;
   // function body...
 }
  • You use one var statement and declare multiple variables delimited by commas. It’s a good practice to also initialize the variable with an initial value at the time you declare it. 
 > Do not forget about the importance of capitals in JavaScript! The word function must be written in lowercase letters, otherwise a JavaScript error occurs! Also note that you must call a function with the exact same capitals as in the function name.

 > If you declare a variable within a function, the variable can only be accessed within that function. When you exit the function, the variable is destroyed. These variables are called local variables. You can have local variables with the same name in different functions, because each is recognized only by the function in which it is declared.

 > Including JavaScript file
  <script src="filename.js" type="text/javascript"></script> 
  The attribute language is deprecated – do not use it.

 > If you declare a variable outside a function, all the functions on your page can access it. The lifetime of these variables starts when they are declared, and ends when the page is closed.
 
  # Detecting Browser Functionality
  • Detect the availability of browser functionalities you desire to use rather than relying on user-agent strings. This helps improve future maintainability as new functionality becomes standard across different browser platforms.
  e.g. 
   ✓ if (typeof window.onorientation != "undefined")
   ✕ if (IE6) 

 > The break statement will break the loop and continue executing the code that follows after the loop (if any).

 > The continue statement will break the current loop and continue with the next value.

 > In "for" loops you iterate over arrays or array-like objects such as arguments and HTMLCollection objects.
   TODO's 
    • Cache the length of the array or collections we are iterating over separatly.
    • Use Single var pattern.
    • replace "i++" with "i+=1", as "i++" is excessive trickiness so JSLint doesn't promote it.
     var i,  max = myarray.length; 
     for (i = 0; i < max; i+=1) {  --  }
     
 > "for-in" loops should be used to iterate over nonarray objects. Looping with for-in is also called enumeration.
    • Here in a for-in loop, the order (the sequence) of listing the properties is not guaranteed.
    • Technically, you can also use for-in to loop over arrays ( as arrays are objects), but it’s not recommended.
    • To avoid having the object methods to show up when enumerating man, you need to call hasOwnProperty()
    var py, custObj = {
    		p1: "",p2: "",p3: "",p4: "",p5: "",
    		m1: function(){ -- }
    	};
     for (py in custObj) {
	 if (custObj.hasOwnProperty(py)) { // filter outs the custObj object methods
      	console.log(i, ":", custObj[py]);
   	}
     } 
 > Embedding JavaScript
  • Do not embed JavaScript in HTML without a good technical reason. HTML/JSP files do not get minified and JSPs do not get cached so embedded code adds significantly to page weight. It is considered bad practice to embed JavaScript. Applying the principle of separation of concerns means that content such as CSS, JavaScript and HTML (our concerns) should be kept apart (separation).
  • Do not use href="javascript:…" unless there is a technical reason to do so. Instead use the method
    $('#target').click(function() {
    	//logic for click event
    });
  • Do not wrap the content of script tags with HTML comments. This is to support older browsers and no longer necessary.

 > Variable Declarations
  •All variables must be declared with ‘var’ otherwise the language assumes the variable is global.
  •There must be no global variables, only member variables.

 > Note that throw is written in lowercase letters. Using uppercase letters will generate a JavaScript error!

 > JavaScript ignores extra spaces. You can add white space to your script to make it more readable. The following lines are equivalent.

 > JavaScript is casecensitive. A function named "myfunction" is not the same as "myFunction" and a variable named "myVar" is not the same as "myvar".

 > File Content
  • Files MUST contain only one namespaced object.

 > File Name
  • Lowercase with no underscores or prefix. It should not start with ‘tui_’ etc.
  • No separator between words.
  • Filename should match that of the namespaced object it contains.
  • File extension of ‘.js’
  e.g. 
  ✓ customwidget.js
  ✕ customwWdget.js
  ✕ custom_widget.js
  ✕ root_customwidget.js
  
 > In JavaScript object is just a special kind of data. An object has properties and methods. Properties are the values associated with an object. We are using the length property of the String object to return the number of characters in a string.

 > Methods are the actions that can be performed on objects. We are using the toUpperCase () method of the String object to display a text in uppercase letters.

  
 > File Location
  • The namespace of the object contained in the file determines the file location.
  e.g.
  ✓ root.ui.CustWidget would be found at
   js/ui/custwidget.js

 > Math is not a constructor. All properties and methods of Math can be called by using Math as an object without creating it.

 > The Navigator object contains all information about the visitor's browser.

 > Programming Practices
 
  # Namespaces
  • All global objects, functions and variables must be namespaced. This is to minimise use of the global namespace and reduce the chance of name conflicts.
  • Functions should be grouped into namespaced ‘objects’.
  • Object property should be accessed with dot notation where possible. This helps improve readability.
  e.g.
   ✓ Object.property 
   ✕ Object["property"]
   
  # Equality
  Use the identity operator === instead of == and !== instead of != as they ensure type safety. == and != perform type coercion.
  e.g.
  12 == "12" is true   // checks only data
  11 === "11" is false // strict equal - type and data
  # Parentheses
  • Use parentheses liberally in expressions involving mixed operators to avoid operator precedence problems and to improve readability.
  e.g. 
   ✓ if ((a == b) && (c == d))
   ✓ total = subtotal + (+el.value);
   ✕ if (a == b && c == d)
   ✕ total = subtotal + +el.value; 
  
  • If an expression containing a binary operator appears before the ? in the ternary ?: operator, it should be parenthesized.
  e.g.
   ✓ (x >= 0) ? x : -x;
  
  # Anonymous functions should be enclosed in brackets when they are executed immediately.
  e.g.
   ✓ util.Anony = (function() { //logic })();
   ✕ util.Anony = function() { //logic  }();  
  
  # XML/HTTP Requests
  • Do not use synchronous requests. They may block the UI and tasks such as the live streaming of prices.
  • Requests must include error checking for failed requests.
  • Indicate to the user that an asynchronous server request is in progress unless the call is not the result of user interaction.
  
  # eval
  • Do not use eval(). For JSON operations use the Yahoo method jQuery.parse()  
  
  # setTimeout, setInterval
  • Only pass in functions to setTimeout and setInterval. Do not use strings as these are eval’d.
  
  # Number Conversions with parseInt()
  • Using parseInt() you can get a numeric value from a string.
  • Supply a base when using parseInt. This ensures there are no unexpected conversion errors. Without a base of 10, strings prefixed with 0x will be treated as hex and those with a leading 0 treated as octal
   i.e. parseInt("0112") would result in 74.
  e.g.
   ✓ myInt = parseInt(myString, 10);
 
  # Event Handling
  Req: on click of button, the count should increment by 1
  <button id="clickme">Click me: 0</button> 
  <script>
	/* Title: Event Handling
	 Description: when you pass function A to function B as a parameter, function A is a callback function
	 */
	
	// antipattern
	/*var b = document.getElementById('clickme'),
	 count = 0;
	 b.onclick = function () {
	 count += 1;
	 b.innerHTML = "Click me: " + count;
	 };*/
	
	// preferred
	var b = document.getElementById('clickme');
	if (document.addEventListener) { // W3C
		b.addEventListener('click', eventHandlerFunc, false);
	} else if (document.attachEvent) { // IE
		b.attachEvent('onclick', eventHandlerFunc);
	} else { // last resort
		b.onclick = eventHandlerFunc;
	}
	
	function eventHandlerFunc(e) {
		var src, parts;
		// get event and source element
		e = e || window.event;
		src = e.target || e.srcElement;
		// actual work: update label
		parts = src.innerHTML.split(": ");
		parts[1] = parseInt(parts[1], 10) + 1;
		src.innerHTML = parts[0] + ": " + parts[1];
		// no bubble
		if (typeof e.stopPropagation === "function") {
			e.stopPropagation();
		}
		if (typeof e.cancelBubble !== "undefined") {
			e.cancelBubble = true;
		}
		// prevent default action
		if (typeof e.preventDefault === "function") {
			e.preventDefault();
		}
		if (typeof e.returnValue !== "undefined") {
			e.returnValue = false;
		}
	}
   </script>
   
   > Function Declarations
   
   	/* Title: Function Declarations
	 * Description: creating anonymous functions and assigning them to a variable
	 */
	// antipattern - named function
	function getData() { 	}
	
	// preferred
	/* Benefits:
	 * 1. Makes it easier to understand "functions as an object".
	 * 2. It enforces good semicolon habits.
	 * 3. Doesn't have much of the baggage traditionally associated with functions and scope.
	 */
	var getData = function () {	};
	
	// named function expression
	/* Benefits:
	 * 1. Provides the debugger with an explicit function name: helps stack inspection.
	 * 2. Allows recursive functions: getData can call itself.
	 * Issues:
	 * 1. Can break in IE - function name collision 
	 */
	var getData = function getData () {	};
	
	// named function expression + 'F'
	/* Benefits:
	 * 1. Get's rid of (anonymous function) in stack traces
	 * 2. Recurse by calling the name + 'F'
	 * 3. Doesn't break an IE 
	 */
	var getData = function getDataF () {	};

 > Callback function:
   <script>
	/* Title: Callback patterns
	 Description: when you pass function A to function B as a parameter, function A is a callback function
	 */
	
	var complexLogic = function () { /* do some complex stuff and return a node */ };
	
	// callback paramter to findNodes
	var findNodes = function (callback) {
		var nodes = [];
		var node = complexComputation();
		// call if callback is callable
		if (typeof callback === "function") {
			//node - returned value of complexLogic
			callback(node);
		}
	
		nodes.push(node);
		return nodes;
	};
	
	// a callback function
	var hide = function (node) {
		node.style.display = "none"; 
		// instead .style, use .className to update CSS
	};
	
	// find the nodes and hide them as you go
	var hiddenNodes = findNodes(hide);

	// you can also use an anonymous function, like this: 
	var showNodes = findNodes(function (node) {
		node.style.display = 'block'; 
		// instead .style, use .className to update CSS
	});
	
	</script>
 > Naming convention or Separating Words
 
  • When you have multiple words in a variable or a function name, it’s a good idea to follow a convention as to how 
  the words will be separated. A common convention is to use the so-called camel case.  

  • For your constructors, you can use upper camel case, as in MyConstructor().
  • For function and method names, you can use lower camel case, as in myFunction(), calculateArea() and getFirstName().
  • For variables that are not functions? Developers commonly use lower camel case for variable names, but another good idea is to use all lowercase words delimited by an underscore.
    example - first_name, favorite_bands, and old_company_name.  
